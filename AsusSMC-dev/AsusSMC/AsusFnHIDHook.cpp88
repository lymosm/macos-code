#include "AsusFnHIDHook.hpp"
#include <IOKit/IORegistryEntry.h>
#include <libkern/libkern.h>
// #include <libkern/OSRuntime.h>   // 必须引入才能用 OSRuntimeModifyCPPVtable
extern "C" void OSRuntimeModifyCPPVtable(void **vtableEntry, void *newFunc);

AsusFnHIDHook::HandleHIDEventFunc AsusFnHIDHook::origHandleHIDEvent = nullptr;

void AsusFnHIDHook::install() {
    IOLog("lymoskey AsusSMC: AsusFnHIDHook install\n");
    IORegistryIterator *iter = IORegistryIterator::iterateOver(gIOServicePlane, kIORegistryIterateRecursively);
    if (!iter) {
        IOLog("lymoskey AsusSMC: Failed to create IORegistry iterator for HID hook\n");
        return;
    }

    IORegistryEntry *entry = nullptr;
    while ((entry = iter->getNextObject())) {
        IOHIDEventDriver *driver = OSDynamicCast(IOHIDEventDriver, entry);
        if (driver) {
            IOLog("lymoskey AsusSMC: Found IOHIDEventDriver: %s\n", driver->getName());
            hookDriver(driver);
        }
    }

    iter->release();
}

void AsusFnHIDHook::hookDriver(IOHIDEventDriver *driver) {
    void **vtable = *(void ***)driver;

    constexpr size_t handleHIDEventIndex = 81;  // Sequoia 依然是 81，验证过

    if (!origHandleHIDEvent) {
        origHandleHIDEvent = (HandleHIDEventFunc)vtable[handleHIDEventIndex];

        OSRuntimeModifyCPPVtable(&vtable[handleHIDEventIndex], (void *)&AsusFnHIDHook::customHandleHIDEvent);

        IOLog("lymoskey AsusSMC: HID hook installed via OSRuntimeModifyCPPVtable! orig=%p\n", origHandleHIDEvent);
    }
}

IOReturn AsusFnHIDHook::customHandleHIDEvent(IOHIDEventDriver *that, IOHIDEvent *event, IOOptionBits options) {
    if (event->getType() == kIOHIDEventTypeKeyboard) {
        UInt32 usagePage = event->getIntegerValue(kIOHIDEventFieldKeyboardUsagePage);
        UInt32 usage = event->getIntegerValue(kIOHIDEventFieldKeyboardUsage);

        if (usagePage == 0x07 && usage == 0x91) {
            IOLog("lymoskey AsusSMC: Fn+F6 HID Key Detected! Usage=0x%X\n", usage);
            // TODO: 调用亮度调节接口
        }
    }

    return origHandleHIDEvent(that, event, options);
}

